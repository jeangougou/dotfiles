[core]
  editor = vim
  autocrlf = true
  repositoryformatversion = 0
  filemode = false
  bare = false
  logallrefupdates = true
  symlinks = false
  ignorecase = true
  hideDotFiles = dotGitOnly
  whitespace = cr-at-eol
[color]
  ui = always
[color "diff"]
  meta = yellow bold
  commit = green bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"
[merge]
  tool = kdiff3
  algorithm = patience 
[mergetool "kdiff3"]
  path = "C:/Program Files/KDiff3/kdiff3.exe"
[diff]
  guitool = kdiff3
  algorithm = patience
[difftool "kdiff3"]
  path = "C:/Program Files/KDiff3/kdiff3.exe"
[fetch]
  prune = true
[push]
  default = current
[filter "lfs"]
  clean = git lfs clean %f
  smudge = git lfs smudge %f
  required = true
[alias]
  st = status
  co = checkout
  br = branch
  up = rebase
  ci = commit
  nb = checkout -b
  do = !git add -A && git commit -m
  undo = reset HEAD~1 --mixed

  # Shows list of contributors of a repository.
  contributors = git shortlog --summary --numbered --email

  # requires> npm install -g diff-so-fancy
  df = !git diff --color | diff-so-fancy | less --tabs=4 -RFX
  noop = !git ci --allow-empty -m 'empty commit'
  
  # Get my working directory up to date.
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive
  
  sortdiff = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'

  # Commits came in since last command - usage:: git new HEAD
  new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  
  # give a count of dirty files
  dirty = !git status --porcelain -uno | wc -l
  
  # `git nuke my-old-branch`
  # (Checks out master and does a non-forced delete on the branch entered)
  nuke = !git co master && sh -c 'git br -d $1' -
  
  # `git save`
  # saves a commit in current branch: local branches you will be rebasing
  save = !git add -A && git commit -m 'SAVEPOINT'
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  
  # attempt to cleanup some common problems
  unfuck = !git fetch --all --prune && git fsck && git remote prune origin && git prune --expire now && git gc --aggressive --auto

  # find the top level of current repository
  top = !git rev-parse --show-toplevel

  # all commits that aren't merges on all branches
  all = !git log --pretty=oneline --abbrev-commit --all --no-merges
  
  # list files changed by last commit in absolute location
  list = !git show --pretty=format:"" --name-only | sed '/^$/d' | sed \"s|^|`git top`/|g\"
  split = "! f() { git checkout -b $1 && git add --all . && git commit -m "[$1] $2" && git push origin $1 && git checkout dev && git pull origin $1 && git push origin dev; }; f"
  
  # GITFLOW cleanup merged branches
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
  bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
  
  # the acronym stands for "subtree add"
  sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
  # the acronym stands for "subtree update"
  sbu = "!f() { git subtree pull --prefix $2 $1 master --squash; }; f"
  
  inject = "!f() { set -e; HASH=`git show $1 --pretty=format:\"%H\" -q`; shift; git commit -m \"fixup! $HASH\" $*; [ -n \"$(git diff-files)\" ] && git stash && DIRTY=1; git rebase $HASH^^ -i --autosquash; [ -n \"$DIRTY\" ] && git stash pop;}; f"
  
  # custom
  j0 =  "! f() { git checkout $1 && git pull $2 $1 && git pull $3 $1 && git reset --hard FETCH_HEAD && git push $2 $1; }; f"
  j1 = "! f() { git stash && git checkout $2 && git pull $1 $2 && git reset --hard FETCH_HEAD; }; f"
[format]
  #pretty = %Cred%h%Creset -%Cgreen%d%Creset %s %Cblue(%cr)%Creset <%ae>
  pretty = %C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n%C(white)%s%C(reset) %C(bold white)â€” %an%C(reset)
[help]
  autocorrect = 1
[credential "helperselector"]
  selected = w
[pull]
  ff = only
[rerere]
  enabled = true
[include]
  path = .gitconfig.user